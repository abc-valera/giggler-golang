// Code generated by ogen, DO NOT EDIT.

package viewgen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AuthLoginPost implements AuthLoginPost operation.
	//
	// Performs user authentication.
	//
	// POST /auth/login
	AuthLoginPost(ctx context.Context, req *AuthLoginPostReq) (*AuthLoginPostOK, error)
	// AuthRefreshPost implements AuthRefreshPost operation.
	//
	// Exchanges a refresh token for an access token.
	//
	// POST /auth/refresh
	AuthRefreshPost(ctx context.Context, req *AuthRefreshPostReq) (*AuthRefreshPostOK, error)
	// AuthRegisterPost implements AuthRegisterPost operation.
	//
	// Performs user registration.
	//
	// POST /auth/register
	AuthRegisterPost(ctx context.Context, req *AuthRegisterPostReq) error
	// JokesDel implements JokesDel operation.
	//
	// Deletes joke for current user.
	//
	// DELETE /jokes
	JokesDel(ctx context.Context, req *JokesDelReq) error
	// JokesGet implements JokesGet operation.
	//
	// Returns the most relevant jokes.
	//
	// GET /jokes
	JokesGet(ctx context.Context, params JokesGetParams) (JokesSchema, error)
	// JokesPost implements JokesPost operation.
	//
	// Creates a new joke for current user.
	//
	// POST /jokes
	JokesPost(ctx context.Context, req *JokesPostReq) (*JokeSchema, error)
	// JokesPut implements JokesPut operation.
	//
	// Updates joke for current user.
	//
	// PUT /jokes
	JokesPut(ctx context.Context, req *JokesPutReq) (*JokeSchema, error)
	// UserDel implements UserDel operation.
	//
	// Deletes current user profile.
	//
	// DELETE /user
	UserDel(ctx context.Context, req *UserDelReq) error
	// UserGet implements UserGet operation.
	//
	// Returns current user profile.
	//
	// GET /user
	UserGet(ctx context.Context) (*UserSchema, error)
	// UserPut implements UserPut operation.
	//
	// Updates current user profile.
	//
	// PUT /user
	UserPut(ctx context.Context, req *UserPutReq) (*UserSchema, error)
	// NewError creates *ErrorSchemaStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorSchemaStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
