// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormQuery

import (
	"context"

	"giggler-golang/src/shared/data/dbgen/gormModel"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newJoke(db *gorm.DB, opts ...gen.DOOption) joke {
	_joke := joke{}

	_joke.jokeDo.UseDB(db, opts...)
	_joke.jokeDo.UseModel(&gormModel.Joke{})

	tableName := _joke.jokeDo.TableName()
	_joke.ALL = field.NewAsterisk(tableName)
	_joke.ID = field.NewString(tableName, "id")
	_joke.Title = field.NewString(tableName, "title")
	_joke.Text = field.NewString(tableName, "text")
	_joke.Explanation = field.NewString(tableName, "explanation")
	_joke.CreatedAt = field.NewTime(tableName, "created_at")
	_joke.UpdatedAt = field.NewTime(tableName, "updated_at")
	_joke.DeletedAt = field.NewField(tableName, "deleted_at")
	_joke.UserID = field.NewString(tableName, "user_id")

	_joke.fillFieldMap()

	return _joke
}

type joke struct {
	jokeDo jokeDo

	ALL         field.Asterisk
	ID          field.String
	Title       field.String
	Text        field.String
	Explanation field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	UserID      field.String

	fieldMap map[string]field.Expr
}

func (j joke) Table(newTableName string) *joke {
	j.jokeDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j joke) As(alias string) *joke {
	j.jokeDo.DO = *(j.jokeDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *joke) updateTableName(table string) *joke {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewString(table, "id")
	j.Title = field.NewString(table, "title")
	j.Text = field.NewString(table, "text")
	j.Explanation = field.NewString(table, "explanation")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")
	j.DeletedAt = field.NewField(table, "deleted_at")
	j.UserID = field.NewString(table, "user_id")

	j.fillFieldMap()

	return j
}

func (j *joke) WithContext(ctx context.Context) *jokeDo { return j.jokeDo.WithContext(ctx) }

func (j joke) TableName() string { return j.jokeDo.TableName() }

func (j joke) Alias() string { return j.jokeDo.Alias() }

func (j joke) Columns(cols ...field.Expr) gen.Columns { return j.jokeDo.Columns(cols...) }

func (j *joke) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *joke) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 8)
	j.fieldMap["id"] = j.ID
	j.fieldMap["title"] = j.Title
	j.fieldMap["text"] = j.Text
	j.fieldMap["explanation"] = j.Explanation
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
	j.fieldMap["deleted_at"] = j.DeletedAt
	j.fieldMap["user_id"] = j.UserID
}

func (j joke) clone(db *gorm.DB) joke {
	j.jokeDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j joke) replaceDB(db *gorm.DB) joke {
	j.jokeDo.ReplaceDB(db)
	return j
}

type jokeDo struct{ gen.DO }

func (j jokeDo) Debug() *jokeDo {
	return j.withDO(j.DO.Debug())
}

func (j jokeDo) WithContext(ctx context.Context) *jokeDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jokeDo) ReadDB() *jokeDo {
	return j.Clauses(dbresolver.Read)
}

func (j jokeDo) WriteDB() *jokeDo {
	return j.Clauses(dbresolver.Write)
}

func (j jokeDo) Session(config *gorm.Session) *jokeDo {
	return j.withDO(j.DO.Session(config))
}

func (j jokeDo) Clauses(conds ...clause.Expression) *jokeDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jokeDo) Returning(value interface{}, columns ...string) *jokeDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jokeDo) Not(conds ...gen.Condition) *jokeDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jokeDo) Or(conds ...gen.Condition) *jokeDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jokeDo) Select(conds ...field.Expr) *jokeDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jokeDo) Where(conds ...gen.Condition) *jokeDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jokeDo) Order(conds ...field.Expr) *jokeDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jokeDo) Distinct(cols ...field.Expr) *jokeDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jokeDo) Omit(cols ...field.Expr) *jokeDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jokeDo) Join(table schema.Tabler, on ...field.Expr) *jokeDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jokeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *jokeDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jokeDo) RightJoin(table schema.Tabler, on ...field.Expr) *jokeDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jokeDo) Group(cols ...field.Expr) *jokeDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jokeDo) Having(conds ...gen.Condition) *jokeDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jokeDo) Limit(limit int) *jokeDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jokeDo) Offset(offset int) *jokeDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jokeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *jokeDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jokeDo) Unscoped() *jokeDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jokeDo) Create(values ...*gormModel.Joke) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jokeDo) CreateInBatches(values []*gormModel.Joke, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jokeDo) Save(values ...*gormModel.Joke) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jokeDo) First() (*gormModel.Joke, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gormModel.Joke), nil
	}
}

func (j jokeDo) Take() (*gormModel.Joke, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gormModel.Joke), nil
	}
}

func (j jokeDo) Last() (*gormModel.Joke, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gormModel.Joke), nil
	}
}

func (j jokeDo) Find() ([]*gormModel.Joke, error) {
	result, err := j.DO.Find()
	return result.([]*gormModel.Joke), err
}

func (j jokeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gormModel.Joke, err error) {
	buf := make([]*gormModel.Joke, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jokeDo) FindInBatches(result *[]*gormModel.Joke, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jokeDo) Attrs(attrs ...field.AssignExpr) *jokeDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jokeDo) Assign(attrs ...field.AssignExpr) *jokeDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jokeDo) Joins(fields ...field.RelationField) *jokeDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jokeDo) Preload(fields ...field.RelationField) *jokeDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jokeDo) FirstOrInit() (*gormModel.Joke, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gormModel.Joke), nil
	}
}

func (j jokeDo) FirstOrCreate() (*gormModel.Joke, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gormModel.Joke), nil
	}
}

func (j jokeDo) FindByPage(offset int, limit int) (result []*gormModel.Joke, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jokeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jokeDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jokeDo) Delete(models ...*gormModel.Joke) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jokeDo) withDO(do gen.Dao) *jokeDo {
	j.DO = *do.(*gen.DO)
	return j
}
